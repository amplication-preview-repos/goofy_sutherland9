/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ResolvedTickets } from "./ResolvedTickets";
import { ResolvedTicketsCountArgs } from "./ResolvedTicketsCountArgs";
import { ResolvedTicketsFindManyArgs } from "./ResolvedTicketsFindManyArgs";
import { ResolvedTicketsFindUniqueArgs } from "./ResolvedTicketsFindUniqueArgs";
import { CreateResolvedTicketsArgs } from "./CreateResolvedTicketsArgs";
import { UpdateResolvedTicketsArgs } from "./UpdateResolvedTicketsArgs";
import { DeleteResolvedTicketsArgs } from "./DeleteResolvedTicketsArgs";
import { Employee } from "../../employee/base/Employee";
import { ResolvedTicketsService } from "../resolvedTickets.service";
@graphql.Resolver(() => ResolvedTickets)
export class ResolvedTicketsResolverBase {
  constructor(protected readonly service: ResolvedTicketsService) {}

  async _resolvedTicketsItemsMeta(
    @graphql.Args() args: ResolvedTicketsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ResolvedTickets])
  async resolvedTicketsItems(
    @graphql.Args() args: ResolvedTicketsFindManyArgs
  ): Promise<ResolvedTickets[]> {
    return this.service.resolvedTicketsItems(args);
  }

  @graphql.Query(() => ResolvedTickets, { nullable: true })
  async resolvedTickets(
    @graphql.Args() args: ResolvedTicketsFindUniqueArgs
  ): Promise<ResolvedTickets | null> {
    const result = await this.service.resolvedTickets(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ResolvedTickets)
  async createResolvedTickets(
    @graphql.Args() args: CreateResolvedTicketsArgs
  ): Promise<ResolvedTickets> {
    return await this.service.createResolvedTickets({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ResolvedTickets)
  async updateResolvedTickets(
    @graphql.Args() args: UpdateResolvedTicketsArgs
  ): Promise<ResolvedTickets | null> {
    try {
      return await this.service.updateResolvedTickets({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ResolvedTickets)
  async deleteResolvedTickets(
    @graphql.Args() args: DeleteResolvedTicketsArgs
  ): Promise<ResolvedTickets | null> {
    try {
      return await this.service.deleteResolvedTickets(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: ResolvedTickets
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
