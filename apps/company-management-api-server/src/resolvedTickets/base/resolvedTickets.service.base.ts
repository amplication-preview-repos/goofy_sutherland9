/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ResolvedTickets as PrismaResolvedTickets,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class ResolvedTicketsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResolvedTicketsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.resolvedTickets.count(args);
  }

  async resolvedTicketsItems(
    args: Prisma.ResolvedTicketsFindManyArgs
  ): Promise<PrismaResolvedTickets[]> {
    return this.prisma.resolvedTickets.findMany(args);
  }
  async resolvedTickets(
    args: Prisma.ResolvedTicketsFindUniqueArgs
  ): Promise<PrismaResolvedTickets | null> {
    return this.prisma.resolvedTickets.findUnique(args);
  }
  async createResolvedTickets(
    args: Prisma.ResolvedTicketsCreateArgs
  ): Promise<PrismaResolvedTickets> {
    return this.prisma.resolvedTickets.create(args);
  }
  async updateResolvedTickets(
    args: Prisma.ResolvedTicketsUpdateArgs
  ): Promise<PrismaResolvedTickets> {
    return this.prisma.resolvedTickets.update(args);
  }
  async deleteResolvedTickets(
    args: Prisma.ResolvedTicketsDeleteArgs
  ): Promise<PrismaResolvedTickets> {
    return this.prisma.resolvedTickets.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.resolvedTickets
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
